import numpy as np

class PriceTable:
    def __init__(self, cc='HKG'):
        if cc == "HKC":
            # https://www.hkex.com.hk/-/media/HKEX-Market/Services/Rules-and-Forms-and-Fees/Rules/SEHK/Securities/Rules/sch-2_eng.pdf?la=en
            self.price_bin = np.array([0.01, 0.25, 0.50, 10.00, 20.00, 100.00, 200.00, 500.00, 1000.00, 2000.00, 5000.00, 9995.00])
            self.tick_size = np.array([0.001, 0.005, 0.010, 0.020, 0.050, 0.100, 0.200, 0.500, 1.000, 2.000, 5.000])
            self.round_to = 3
        elif cc == 'KOR':
            # http://global.krx.co.kr/contents/GLB/06/0602/0602010201/GLB0602010201.jsp#826f2bceb71bdd795d4f782fda605cb1=3
            self.price_bin = np.array([0, 1000, 5000, 10000, 50000, 100000, 500000, 1e6])
            self.tick_size = np.array([1, 5, 10, 50, 100, 500, 1000])
            self.round_to = 0
        elif cc == 'TWN':
            # https://www.twse.com.tw/en/page/products/trading/introduce.html
            self.price_bin = np.array([0.01, 10.0, 50.0, 100.0, 500.0, 1000.0, 9999.0])
            self.tick_size = np.array([0.01, 0.05, 0.10, 0.50, 1.00, 5.00])
            self.round_to = 2
        else:
            print("!!!! no tick schedule yet for {} !!!!".format(cc))
        self._generate_price_table()

    def _generate_price_table(self):
        valid_prices = []
        pr = self.price_bin[0]
        for i in range(len(self.tick_size)):
            while pr < self.price_bin[i+1]:
                valid_prices.append(pr)
                pr += self.tick_size[i]
                pr = np.round(pr, self.round_to)
        valid_prices.append(pr)
        self.price_table = valid_prices
        self.price_idx = dict(zip(valid_prices, range(len(valid_prices))))
        self.table_size = len(valid_prices)

    def getPriceDown(self, price, n=1):
        if price in self.price_idx:
            idx = self.price_idx[price]
        else:
            idx = np.searchsorted(self.price_table, price, side='left')
            if idx == 0:
                print("!!!! price already below lower limit !!!")

        new_idx = idx - n
        if new_idx < 0:
            print("!!! new index out of range (below) !!!")
        else:
            return self.price_table[new_idx]

    def getPriceUp(self, price, n=1):
        if price in self.price_idx:
            idx = self.price_idx[price]
        else:
            idx = np.searchsorted(self.price_table, price, side='left') - 1
            if idx >= self.table_size:
                print("!!!! price already above upper limit !!!")

        new_idx = idx + n
        if new_idx >= self.table_size:
            print("!!! new index out of range (above) !!!")
        else:
            return self.price_table[new_idx]

    # get price less than or equal to
    def getPriceLE(self, price):
        idx = np.searchsorted(self.price_table, price, side='right')
        return self.price_table[idx-1]

    # get price greater than or equal to
    def getPriceGE(self, price):
        idx = np.searchsorted(self.price_table, price, side='left')
        return self.price_table[idx]

if __name__ == '__main__':
    tksch = PriceTable('HKG')
    tksch.getPriceDown(0.25)
    tksch.getPriceUp(0.25)
    tksch.getPriceDown(0.251)
    tksch.getPriceUp(0.2553)

    tksch.getPriceDown(20)
    tksch.getPriceUp(20)
    tksch.getPriceDown(20.0001)
    tksch.getPriceUp(20.0001)


