import sys
import pandas as pd
import numpy as np
import functools

# this version of DateTimeUntils can take care of strategy that trade several contries with different holiday
# schedule, we can use the union of all holidays
# it is for the pair trading strategy

def _read_holiday_file():
    d = {}
    hfn = 'W:/pgms/Python/Utils/CHN_HKG_CountryHolidays'
    fp = open(hfn, 'r')
    for line in fp:
        if line[0] in ['!', '[']:
            continue
        else:
            cc, ymd = line.rstrip().split('|')
            if cc not in d:
                d[cc] = []
            else:
                d[cc].append(ymd)
    #end for
    return d

d_holidays = _read_holiday_file()

# the country code can be 'HKG|CHN", so the holiday will be the union of two countries
# we use such calendar to study cross country strategies.
def cc2holidays(cc):
    cs = cc.split('|')
    holidays = set([])
    for c in cs:
        holidays = holidays.union(set(d_holidays[c]))
    return list(holidays)

def getTraingDays(st, en, cc='CHN'):
    bdays = pd.bdate_range(st, en).to_series()
    return bdays[~bdays.isin(cc2holidays(cc))]

def getNTradingDays(st, N, cc='CHN'):
    bdays = pd.bdate_range(st, pd.to_datetime(st)+pd.Timedelta(days=1.5*N+20)).to_series()
    return bdays[~bdays.isin(cc2holidays(cc))][:N]

def getNextTradingDay(ymd, n=1, retfmt='%Y%m%d', cc='CHN'):
    if n < 1:
        print('n must be greater than or equal to 1')
        return
    bdays = getTraingDays(pd.to_datetime(ymd) + pd.Timedelta(days=1),
                          pd.to_datetime(ymd) + pd.Timedelta(days=int(n * 1.5) + 20), cc=cc)
    dt64 = bdays[n-1]
    if retfmt:
        return dt64.strftime(retfmt)
    else:
        return dt64

def getPrevTradingDay(ymd, n=1, retfmt='%Y%m%d', cc='CHN'):
    if n < 1:
        print('n must be greater than or equal to 1')
        return
    bdays = getTraingDays(pd.to_datetime(ymd) + pd.Timedelta(days=int(n * 1.5) + 20),
                          pd.to_datetime(ymd) + pd.Timedelta(days=1), cc=cc)
    dt64 = bdays[-n]
    if retfmt:
        return dt64.strftime(retfmt)
    else:
        return dt64

# i need to improve this function, to add **kwarg type of parameters so we can pass more
# argument to this function.

def get_multi_day(st, en, func, cc='CHN', **kwargs):
    tdfs = []
    for dt in getTraingDays(st, en, cc=cc):
        print(dt)
        ymd = dt.strftime('%Y%m%d')
        tmp_df = func(ymd, **kwargs)
        tdfs.append(tmp_df)
    df = pd.concat(tdfs, axis=0)
    return df

def hms2ssm(hms):
    return functools.reduce(lambda acc, x: acc*60 + x, map(float, hms.split(':')))

def ssm2hms(ssm):
    h = ssm // 3600
    r = ssm - h * 3600
    m = r // 60
    s = r - m * 60
    return '{:02d}:{:02d}:{:02d}'.format(h, m, s)

if __name__ == '__main__':
    getTraingDays('20190101', '20190228')

