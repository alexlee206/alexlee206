import plotly.graph_objects as go
import pandas as pd
from ipywidgets import widgets, VBox
from IPython.display import display

# Sample DataFrame
df = pd.DataFrame({
    'x': range(10),
    'y': range(10)
})

# Create a FigureWidget
fig_widget = go.FigureWidget(data=[go.Scatter(x=df['x'], y=df['y'], mode='markers')])

# Create a slider widget
slider = widgets.IntSlider(min=0, max=10, step=1, description='X Value')

# Define a callback function to update the figure
def update_plot(change):
    fig_widget.data[0].x = df['x'][:change['new']]
    fig_widget.data[0].y = df['y'][:change['new']]

# Link the slider to the callback function
slider.observe(update_plot, names='value')

# Display the widgets and the figure
display(VBox([slider, fig_widget]))
from plotly.io import write_html

# Save the interactive plot as HTML
write_html(fig_widget, file='interactive_plot.html', auto_open=True)


# this program is used to check the completeness of data, find out missing days
# fmtstr should include {0}, {1} {2}, {3}

import os
import sys
import Utils.DateTimeUtils as dtu

if __name__ == '__main__':
    try:
        __file__
    except:
        sys.argv = [sys.argv[0], 'W:/ChinaFutures/Data/raw/{0}.spt', '20160101', '20160331']
    fmtstr = sys.argv[1]
    st = sys.argv[2]
    en = sys.argv[3]
    for dt in dtu.getTradingDays(st, en):
        ymd = dt.strftime('%Y%m%d')
        y = ymd[0:4]
        m = ymd[4:6]
        d = ymd[6:8]
        fn = fmtstr.format(ymd, y, m, d)
        if not os.path.exists(fn):
            print('{} : N/A'.format(fn))
        else:
            sz_bytes = os.stat(fn).st_size
            if sz_bytes < 1024:
                sz = sz_bytes
                suffix = 'B'
            elif sz_bytes < 1048576:
                sz = sz_bytes / 1024
                suffix = 'K'
            elif sz_bytes < 1073741824:
                sz = sz_bytes / 1048576
                suffix = 'M'
            else:
                sz = sz_bytes / 1073741824
                suffix = 'G'
            print('{} : {:.2f}{}'.format(fn, sz, suffix))
